syntax = "proto3";

package accounts;

import "google/api/annotations.proto";

message Empty {}

message User {
    string id = 1;
    string username = 2;
    string password = 3;
    bool is_active = 4;
    bool is_admin = 5;
    int64  create_at = 6;
    string profile_id = 7;
    Profile profile = 8;
}

message Users {
    repeated User users = 1;
}

message Profile {
    string id = 1;
    string nickname = 4;
    string description = 5;
    string phone = 6;
    string email = 7;
    string avatar = 8;
}

message UpdateProfileRequest {
    string id = 1;
    string nickname = 2;
    string description = 3;
    string phone = 4;
    string email = 5;
}

message Member {
    User    user = 2;
    Profile profile = 4;
}

message Members {
    repeated Member members = 1;
}

message PublicKey {
    string key = 1;
    string user_id = 2;
    int64 create_at = 3;
}

message CreateUserRequest {
    string username = 1;
    string password = 2;
    string email = 3;
    string phone = 4;
}

message UpdateUserRequest {
    string id = 1;
    string username = 2;
    string email = 3;
    string phone = 4;
}

message UpdatePasswordRequest{
    string login_id = 1;
    string new_password = 2;
    oneof password {
        string old_password = 3;
        string token = 4;
    }
}

message ResetPasswordRequest {
    enum ResetType {
        EMAIL = 0;
        PHONE = 1;
    }
    string login_id = 1;
    ResetType type = 2;
}

message ActiveUserRequest {
    string id = 1;
    bool active = 2;
}

message ListUsersRequest {
    string username = 1;
    string email = 2;
    string phone = 3;
    bool is_active = 4;
    bool is_not_admin = 5;
}

message LoginRequest {
    string login_id = 1;
    string password = 2;
    string device = 3;
}

message LogoutRequest {
    string device = 1;
}

message LoginReply {
    string token = 1;
    User user = 2;
}

message SearchUsersRequest {
    string username = 1;
}

message GetUserRequest {
    string id = 1;
}

message DeleteUserRequest {
    string id = 1;
}

message Team {
    string id = 1;
    string name = 2;
    string description = 3;
    string owner_id = 4;
    string organization_id = 5;
    int64 create_at = 6;
}

message Teams {
    repeated Team teams = 1;
}

message CreateTeamRequest {
    string name = 1;
    string description = 2;
    string owner_id = 3;
    string organization_id = 4;
}

message UpdateTeamRequest {
    string id = 1;
    string name = 2;
    string description = 3;
    string owner_id = 4;
}

message GetTeamRequest {
    string id = 1;
}

message ListTeamsRequest {
    string organization_id = 1;
}

message DeleteTeamRequest {
    string id = 1;
}

message AddTeamMemberRequest {
    string team_id = 1;
    string user_id = 2;
}

message RemoveTeamMemberRequest {
    string team_id = 1;
    string user_id = 2;
}

message ListTeamMembersRequest {
    string id = 1;
}

message GetTeamMemberRequest {
    string team_id = 1;
    string user_id = 2;
}

message Organization {
    string id = 1;
    string name = 2;
    string description = 3;
    string owner_id = 4;
    int64 create_at = 5;
}

message Organizations {
    repeated Organization organizations = 1;
}

message CreateOrganizationRequest {
    string name = 1;
    string description = 2;
    string owner_id = 3;
}

message UpdateOrganizationRequest {
    string id = 1;
    string name = 2;
    string description = 3;
    string owner_id = 4;
}

message GetOrganizationRequest {
    string id = 1;
}

message DeleteOrganizationRequest {
    string id = 1;
}

message AddOrganizationMemberRequest {
    string organization_id = 1;
    string user_id = 2;
}

message RemoveOrganizationMemberRequest {
    string organization_id = 1;
    string user_id = 2;
}

message ListOrganizationMembersRequest {
    string id = 1;
}

message GetOrganizationMemberRequest {
    string organization_id = 1;
    string user_id = 2;
}

enum operation {
    ACCOUNT_CREATE = 0;
    ACCOUNT_DELETE = 1;
    ACCOUNT_LIST = 2;
    ACCOUNT_UPDATE = 3;

    TEAM_CREATE = 10;
    TEAM_DELETE = 11;
    TEAM_LIST = 12;
    TEAM_UPDATE = 13;
    TEAM_ADD_MEMBER = 14;
    TEAM_REMOVE_MEMBER = 15;

    ORGANIZATION_CREATE = 20;
    ORGANIZATION_DELETE = 21;
    ORGANIZATION_LIST = 22;
    ORGANIZATION_UPDATE = 23;
    ORGANIZATION_ADD_MEMBER = 24;
    ORGANIZATION_REMOVE_MEMBER = 25;

    REPO_READ = 30;
    REPO_WRITE = 31;
}

message operations {
    repeated operation permissions = 1;
}


enum ROLE_TYPE {
    SYSTEM = 0;
    ORGANIZATION = 1;
    TEAM = 2;
    REPO = 3;
}

message role {
    string id = 1;
    string name = 2;
    ROLE_TYPE type = 3;
    string resource_id = 4;
    repeated operation operations = 5;
}

message ListRoleTypeOperationsRequest {
    ROLE_TYPE type = 1;
}

message CreateRoleRequest {
    string name = 1;
    ROLE_TYPE type = 2;
    string resource_id = 3;
    repeated operation operations = 4;
}

message roles {
    repeated role roles = 1;
}

message ListRolesRequest {
    ROLE_TYPE type = 1;
    string resource_id = 2;
}

message DeleteRoleRequest {
    string id = 1;
}

message GrantRequest {
    string user_id = 1;
    string role_id = 2;
}

message RevokeRequest {
    string user_id = 1;
    string role_id = 2;
}

message GetUserRoleRequest {
    string user_id = 1;
    ROLE_TYPE type = 2;
    string resource_id = 3;
}

service AccountSrv {
    rpc CreateUser(CreateUserRequest) returns (User) {
        option (google.api.http) = {
            post: "/v1/accounts"
            body: "*"
        };
    };

    rpc UpdateUser(UpdateUserRequest) returns (User){
        option (google.api.http) = {
            put: "/v1/accounts/{id}"
            body: "*"
        };
    };

    rpc UpdatePassword(UpdatePasswordRequest) returns (Empty){
        option (google.api.http) = {
            put: "/v1/accounts/{login_id}/password"
            body: "*"
        };
    };

    rpc ResetPassword(ResetPasswordRequest) returns (Empty){
        option (google.api.http) = {
            put: "/v1/accounts/{login_id}/resetpassword"
            body: "*"
        };
    };

    rpc ActiveUser(ActiveUserRequest) returns (User){
        option (google.api.http) = {
            put: "/v1/accounts/{id}/active"
            body: "*"
        };
    };

    rpc ListUsers(ListUsersRequest) returns (Users) {
        option (google.api.http) = {
            get: "/v1/accounts"
        };
    };

    rpc SearchUsers(SearchUsersRequest) returns (Users){
        option (google.api.http) = {
            get: "/v1/accounts/search/{username}"
        };
    };

    rpc GetUser(GetUserRequest) returns (User){
        option (google.api.http) = {
            get: "/v1/accounts/{id}"
        };
    };

    rpc DeleteUser(DeleteUserRequest) returns(Empty) {
        option (google.api.http) = {
            delete: "/v1/accounts/{id}"
        };
    };

    rpc Login(LoginRequest) returns (LoginReply){
        option (google.api.http) = {
            post: "/v1/accounts/login"
            body: "*"
        };
    };

    rpc Logout(LogoutRequest) returns (Empty) {
        option (google.api.http) = {
            post: "/v1/accounts/logout"
        };
    };

    rpc CreateTeam(CreateTeamRequest) returns (Team){
        option (google.api.http) = {
            post: "/v1/teams"
            body: "*"
        };
    };

    rpc UpdateTeam(UpdateTeamRequest) returns (Team){
        option (google.api.http) = {
            put: "/v1/teams/{id}"
            body: "*"
        };
    };

    rpc ListTeams(ListTeamsRequest) returns (Teams){
        option (google.api.http) = {
            get: "/v1/teams"
        };
    };

    rpc GetTeam(GetTeamRequest) returns (Team){
        option (google.api.http) = {
            get: "/v1/teams/{id}"
        };
    };

    rpc DeleteTeam(DeleteTeamRequest) returns(Empty){
        option (google.api.http) = {
            delete: "/v1/teams/{id}"
        };
    };

    rpc AddTeamMember(AddTeamMemberRequest) returns (Empty){
        option (google.api.http) = {
            post: "/v1/teams/{team_id}/members/{user_id}"
        };
    };

    rpc RemoveTeamMember(RemoveTeamMemberRequest) returns (Empty){
        option (google.api.http) = {
            delete: "/v1/teams/{team_id}/members/{user_id}"
        };
    };

    rpc ListTeamMembers(ListTeamMembersRequest) returns (Members){
        option (google.api.http) = {
            get: "/v1/teams/{id}/members"
        };
    };

    rpc GetTeamMember(GetTeamMemberRequest) returns (Member){
        option (google.api.http) = {
            get: "/v1/teams/{team_id}/members/{user_id}"
        };
    };

    rpc CreateOrganization(CreateOrganizationRequest) returns (Organization){
        option (google.api.http) = {
            post: "/v1/organizations"
            body: "*"
        };
    };
    rpc UpdateOrganization(UpdateOrganizationRequest) returns (Organization){
        option (google.api.http) = {
            put: "/v1/organizations/{id}"
            body: "*"
        };
    };

    rpc ListOrganizations(Empty) returns (Organizations){
        option (google.api.http) = {
            get: "/v1/organizations"
        };
    };

    rpc GetOrganization(GetOrganizationRequest) returns (Organization){
        option (google.api.http) = {
            post: "/v1/organizations/{id}"
        };
    };

    rpc DeleteOrganization(DeleteOrganizationRequest) returns(Empty){
        option (google.api.http) = {
            delete: "/v1/organizations/{id}"
        };
    };

    rpc AddOrganizationMember(AddOrganizationMemberRequest) returns (Empty){
        option (google.api.http) = {
            post: "/v1/organizations/{organization_id}/members/{user_id}"
        };
    };

    rpc RemoveOrganizationMember(RemoveOrganizationMemberRequest) returns (Empty){
        option (google.api.http) = {
            delete: "/v1/organizations/{organization_id}/members/{user_id}"
        };
    };

    rpc ListOrganizationMembers(ListOrganizationMembersRequest) returns (Members) {
        option (google.api.http) = {
            get: "/v1/organizations/{id}/members"
        };
    };

    rpc GetOrganizationMember(GetOrganizationMemberRequest) returns (Member) {
        option (google.api.http) = {
            get: "/v1/organizations/{organization_id}/members/{user_id}"
        };
    };

    rpc UpdateProfile(UpdateProfileRequest) returns (Profile) {
        option (google.api.http) = {
            put: "/v1/profiles/{id}"
            body: "*"
        };
    }

    rpc CreateRole(CreateRoleRequest) returns (role) {
        option (google.api.http) = {
            post: "/v1/permission/roles"
            body: "*"
        };
    };

    rpc ListRoles(ListRolesRequest) returns (roles){
        option (google.api.http) = {
            get: "/v1/permission/roles"
        };
    };

    rpc DeleteRole(DeleteRoleRequest) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/permission/roles/{id}"
        };
    };

    rpc Grant(GrantRequest) returns (Empty){
        option (google.api.http) = {
            post: "/v1/permission/grant"
            body: "*"
        };
    };

    rpc Revoke(RevokeRequest) returns (Empty){
        option (google.api.http) = {
            post: "/v1/permission/revoke"
            body: "*"
        };
    };

    rpc GetUserRoles(GetUserRoleRequest) returns (roles){
        option (google.api.http) = {
            get: "/v1/permission/users/{user_id}/roles"
        };
    };

    rpc ListRoleTypeOperations(ListRoleTypeOperationsRequest) returns (operations){
        option (google.api.http) = {
            get: "/v1/permission/roles/operations"
        };
    };
}